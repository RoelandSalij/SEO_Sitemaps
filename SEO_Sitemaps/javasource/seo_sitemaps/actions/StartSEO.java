// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package seo_sitemaps.actions;

import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.Enumeration;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.mendix.core.Core;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import system.proxies.HttpHeader;
import system.proxies.HttpRequest;
import system.proxies.HttpResponse;
import system.proxies.HttpMessage;

public class StartSEO extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String robots_mf;
	private java.lang.String sitemap_mf;

	public StartSEO(IContext context, java.lang.String robots_mf, java.lang.String sitemap_mf)
	{
		super(context);
		this.robots_mf = robots_mf;
		this.sitemap_mf = sitemap_mf;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		Core.addRequestHandler("robots.txt", new RobotsHandler(this.getContext(), robots_mf));
		Core.addRequestHandler("sitemap.xml", new SiteMapHandler(this.getContext(), sitemap_mf));
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "StartSEO";
	}

	// BEGIN EXTRA CODE
	
	public class RobotsHandler extends RequestHandler {
	    private IContext context;
	    
	    public RobotsHandler(IContext context, String microflow) {
	        this.context = context;
	    }
	    
	    @Override
	    public void processRequest(IMxRuntimeRequest iMxRuntimeRequest, IMxRuntimeResponse iMxRuntimeResponse, String s) throws Exception {
	        
	    	setResponse(context, iMxRuntimeRequest,iMxRuntimeResponse, robots_mf);
	    }
	}
	
	public class SiteMapHandler extends RequestHandler {
	    private IContext context;
	    
	    public SiteMapHandler(IContext context, String sitemap_mf) {
	        this.context = context;
	    }
	    
	    @Override
	    public void processRequest(IMxRuntimeRequest iMxRuntimeRequest, IMxRuntimeResponse iMxRuntimeResponse, String s) throws Exception {
	        
	    	setResponse(context, iMxRuntimeRequest,iMxRuntimeResponse, sitemap_mf);
	    }
	}
	
	private void setResponse(IContext context, IMxRuntimeRequest iMxRuntimeRequest, IMxRuntimeResponse iMxRuntimeResponse, String mfToExecute) throws IOException {
		Object mfOutput = null;
        HttpRequest httpRequestParameter = getHTTPRequest(context, iMxRuntimeRequest);
        
        mfOutput = Core.microflowCall(mfToExecute)
        		.withParam("HttpRequest", httpRequestParameter.getMendixObject())
        		.execute(context);
        
        if(mfOutput instanceof String) {
        	String response = (String)mfOutput;
        	if(!response.isEmpty()) {
        		iMxRuntimeResponse.getWriter().write((String) response);
        	}
	        iMxRuntimeResponse.addHeader("Content-type", "application/xml");
	        iMxRuntimeResponse.setStatus(HttpServletResponse.SC_OK);
        }
        else if(mfOutput instanceof IMendixObject) {
        	
        	if (((IMendixObject) mfOutput).getType().equals(HttpResponse.getType())) {
        		HttpResponse httpResponse = HttpResponse.initialize(context, (IMendixObject)mfOutput);
        		
        		if(httpResponse.getContent()!=null) {
        			iMxRuntimeResponse.getWriter().write(httpResponse.getContent());
        		}
        		
        		setHttpHeaders(context, iMxRuntimeResponse, httpResponse);
    	        
    	        iMxRuntimeResponse.setStatus(httpResponse.getStatusCode());
        	}
        	else {
        		throw new InvalidParameterException("Expected a return variable for the microflow" + mfToExecute + " to be of type \"System.HttpResponse\"");
        	}
        	
        }
        
        iMxRuntimeResponse.getWriter().flush();
		
	}
	
	private HttpRequest getHTTPRequest(IContext context, IMxRuntimeRequest iMxRuntimeRequest) throws IOException {
		HttpRequest httpRequest = new HttpRequest(getContext());
		
		HttpServletRequest servletRequest = iMxRuntimeRequest.getHttpServletRequest();
		
		httpRequest.setContent(servletRequest.getReader().lines().collect(Collectors.joining()));
		httpRequest.setHttpVersion(servletRequest.getProtocol());
		httpRequest.setUri(servletRequest.getRequestURI());
		
		Enumeration<String> headerNames = iMxRuntimeRequest.getHttpServletRequest().getHeaderNames();
        while(headerNames.hasMoreElements()) {
        	
        	HttpHeader requestHeader = new HttpHeader(context);
        	
        	String paramName = (String)headerNames.nextElement();
        	requestHeader.setHttpHeaders(context, httpRequest);
        	requestHeader.setKey(paramName);
            requestHeader.setValue(servletRequest.getHeader(paramName));
        }
		
		return httpRequest;
	}
	
	private void setHttpHeaders(IContext context, IMxRuntimeResponse iMxRuntimeResponse, HttpResponse httpResponse) {
			
		 HttpMessage httpMessage = HttpMessage.initialize(context, httpResponse.getMendixObject());
		
		 List<IMendixObject> httpHeaders = Core.retrieveByPath(context, httpMessage.getMendixObject(), HttpHeader.MemberNames.HttpHeaders.toString());
		 
		 for(IMendixObject obj : httpHeaders) {
			 HttpHeader httpHeader = HttpHeader.initialize(context, obj);
			 iMxRuntimeResponse.addHeader(httpHeader.getKey(), httpHeader.getValue());
		 }
	}
	// END EXTRA CODE
}
